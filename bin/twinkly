#!/usr/bin/env node
// Examples
// Turn on: twinkly --ip 192.168.4.1 --mode movie
// Turn off: twinkly --ip 192.168.4.1 --mode off
// Blink: twinkly --ip 192.168.4.1 -c 128,0,0 -c 0,255,0 -c 64,0,6 --effect blink --delay 500

const {Twinkly} = require("../lib/Twinkly");
const {Discoverer} = require("../lib/Discoverer");
const commander = require("commander");

let options = commander
    .option("--ip <address>", "IP address of device")
    .option("--mode <mode>", "\"off\", \"movie\", or \"demo\"")
    .option("-b, --brightness <brightess>", "Brightness between 1 and 100", parseInt)
    .option("-c, --color <color>", "3 or 4 color bytes, e.g. FF0000 or 255,0,0,0", collect, [])
    .option("-e, --effect <effect>", "blink, twinkle or loop")
    .option("-d, --delay <delay>", "Delay in ms between effect frames", parseInt)
    .option("-v, --verbose", "Verbose logging", false)
    .option("--timeout <ms>", "Connection timeout", 1000)
    .option("--discover", "Discover and list Twinkly devices on the local network")
    .parse(process.argv);

if (options.discover) {
    let discoverer = new Discoverer(console.log, options.timeout, (addr, msg) => console.log(`${addr}: ${msg}`));
    discoverer.start().then(() => {});
    if (!options.ip) {
        return 0;
    }
}

let brightness = options.brightness;
let color = options.color.length ? parseColors(options.color) : null;
if (options.color.length && !color) {
    options.outputHelp();
    return 1;
}
if (!options.ip) {
    console.error("No IP address specified\n");
    options.outputHelp();
    return 1;
}
let delay = options.delay;
let config = {
    "ip": options.ip,
    "verbose": options.verbose,
    "timout": options.timeout,
};

let twinkly = new Twinkly(console.log, config);

if (brightness) {
    twinkly.setBrightness(brightness).then();
}
if (color) {
    let promise;
    if (options.effect === "blink") {
        promise = twinkly.setBlinkingColors(color, delay);
    } else if (options.effect === "twinkle") {
        promise = twinkly.setTwinklingColors(color, delay);
    } else if (options.effect === "loop") {
        promise = twinkly.setLoopingColors(color, delay);
    } else {
        promise = twinkly.setColors(color);
    }
    promise.then(() => twinkly.setMode("movie"));
} else if (options.mode) {
    twinkly.setMode(options.mode).then();
}

function collect(val, list) {
    list.push(val);
    return list;
}

function parseColors(strings) {
    let array = [];
    for (string of strings) {
        array.push(parseColor(string));
    }
    return array;
}

function parseColor(string) {
    let match = string.match(/^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i);
    if (match) {
        return [parseHex(match[1]), parseHex(match[2]), parseHex(match[3])].concat(match[4] ? [parseHex(match[4])] : []);
    }
    match = string.match(/^(\d+),(\d+),(\d+)(,(\d+))?$/i);
    if (match) {
        return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])].concat(match[4] ? [parseInt(match[5])] : []);
    }
    console.error(`Invalid color format ${string}`);
    return null;
}

function parseHex(string) {
    return parseInt(string, 16);
}
